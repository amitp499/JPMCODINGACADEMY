package com.jp.controllers;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.jp.hr.entities.Employee;
import com.jp.hr.exceptions.HrException;
import com.jp.hr.services.ServiceEmployee;


/*
 * @Controller : a kind of @ component to declare SpringMVC controller
 * @RequestMapping: To map a controlling method to the URI
 * @RequestParam : to take single querystring or formdata field value
 * Multi- action controllers (each page has seperate method)
 */


@Controller
public class HomePageController {
	
	//http://localhost:8080/Spring110_MVC_Basics/homePage.do
	

	
	@Autowired
	@Qualifier("service")
	private ServiceEmployee empService;
	
	
	private Validator validator;
	
	@InitBinder
    private void validaterBinder(WebDataBinder binder) {
		ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();
        validator = validatorFactory.getValidator();
        /*SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        CustomDateEditor editor = new CustomDateEditor(dateFormat, true);
        binder.registerCustomEditor(Date.class, editor);*/
        System.out.println("Validator is set."+validator.hashCode());
    }
	
	@RequestMapping("homePage.hr")
	public String getHomePage(){
		
		System.out.println("in home page");
		
		return "homePage";
	}
	
	
	
	@RequestMapping("getEmpList.hr")
	public ModelAndView getEmpList(){
				
		ModelAndView mAndv = new ModelAndView();		
		try {
						
			ArrayList<Employee> empList = empService.getEmpList();
			mAndv.addObject("EmployeeList", empList);
			mAndv.setViewName("employeeList");
						
		} catch (HrException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return mAndv;				
	}
	
	
	
	@RequestMapping("getEmpDetails.hr")	
	public ModelAndView getEmpDetails(HttpServletRequest request, @RequestParam("id") int empId){
		
		//@RequestParam - performs below comented actions
		/*String strEmpId = request.getParameter("id");
		
		int empId = Integer.parseInt(strEmpId);
				*/
		ModelAndView mAndv = new ModelAndView();		
		try {
						
			Employee empDetailsO = empService.getEmpDetails(empId);
			mAndv.addObject("EmployeeDetails", empDetailsO);
			mAndv.setViewName("empDetails");
						
		} catch (HrException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		return mAndv;				
	}
	
	@RequestMapping("registrationForm.hr")	
	public String getRegistrationForm(Model model){
		
		//define command object
		Employee emp = new Employee();
		
		model.addAttribute("command", emp);
		
		return "entryPage";				
	}
	
	
	
	@RequestMapping("submitRegistrationData.hr")	
	public String submitRegistrationForm(@ModelAttribute("command") Employee emp, Model model) {
		
		//define command object
		//System.out.println(emp);
		
		try {
			
			if((emp.getEmpId()!=0) || (emp.getFirstName()!="") || (emp.getLastName()!="")){
				
				boolean empAddSuccess = empService.addNewEmp(emp);
				return "saveSuccess";
			}else{
				
				model.addAttribute("msg", "Insert Failed : Incorrect Data entered");
				return "entryPage";
			}
			
			
				
		} catch (HrException e) {
			model.addAttribute("msg", "Insert Failed "+e.getMessage());
			return "entryPage";
		}
		
		
					
	}
	
	
	
	

}
